/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package edu.stthomas.gps.multiplevalues;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Multiple extends org.apache.avro.specific.SpecificRecordBase
		implements org.apache.avro.specific.SpecificRecord {
	public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser()
			.parse("{\"type\":\"record\",\"name\":\"Multiple\",\"namespace\":\"edu.stthomas.gps.multiplevalues\",\"fields\":[{\"name\":\"intField\",\"type\":\"int\"},{\"name\":\"floatField\",\"type\":\"float\"},{\"name\":\"stringField\",\"type\":\"string\"}]}");

	public static org.apache.avro.Schema getClassSchema() {
		return SCHEMA$;
	}

	@Deprecated
	public int intField;
	@Deprecated
	public float floatField;
	@Deprecated
	public java.lang.CharSequence stringField;

	/**
	 * Default constructor. Note that this does not initialize fields to their
	 * default values from the schema. If that is desired then one should use
	 * {@link \#newBuilder()}.
	 */
	public Multiple() {
	}

	/**
	 * All-args constructor.
	 */
	public Multiple(java.lang.Integer intField, java.lang.Float floatField,
			java.lang.CharSequence stringField) {
		this.intField = intField;
		this.floatField = floatField;
		this.stringField = stringField;
	}

	public org.apache.avro.Schema getSchema() {
		return SCHEMA$;
	}

	// Used by DatumWriter. Applications should not call.
	public java.lang.Object get(int field$) {
		switch (field$) {
		case 0:
			return intField;
		case 1:
			return floatField;
		case 2:
			return stringField;
		default:
			throw new org.apache.avro.AvroRuntimeException("Bad index");
		}
	}

	// Used by DatumReader. Applications should not call.
	@SuppressWarnings(value = "unchecked")
	public void put(int field$, java.lang.Object value$) {
		switch (field$) {
		case 0:
			intField = (java.lang.Integer) value$;
			break;
		case 1:
			floatField = (java.lang.Float) value$;
			break;
		case 2:
			stringField = (java.lang.CharSequence) value$;
			break;
		default:
			throw new org.apache.avro.AvroRuntimeException("Bad index");
		}
	}

	/**
	 * Gets the value of the 'intField' field.
	 */
	public java.lang.Integer getIntField() {
		return intField;
	}

	/**
	 * Sets the value of the 'intField' field.
	 * 
	 * @param value
	 *            the value to set.
	 */
	public void setIntField(java.lang.Integer value) {
		this.intField = value;
	}

	/**
	 * Gets the value of the 'floatField' field.
	 */
	public java.lang.Float getFloatField() {
		return floatField;
	}

	/**
	 * Sets the value of the 'floatField' field.
	 * 
	 * @param value
	 *            the value to set.
	 */
	public void setFloatField(java.lang.Float value) {
		this.floatField = value;
	}

	/**
	 * Gets the value of the 'stringField' field.
	 */
	public java.lang.CharSequence getStringField() {
		return stringField;
	}

	/**
	 * Sets the value of the 'stringField' field.
	 * 
	 * @param value
	 *            the value to set.
	 */
	public void setStringField(java.lang.CharSequence value) {
		this.stringField = value;
	}

	/** Creates a new Multiple RecordBuilder */
	public static edu.stthomas.gps.multiplevalues.Multiple.Builder newBuilder() {
		return new edu.stthomas.gps.multiplevalues.Multiple.Builder();
	}

	/** Creates a new Multiple RecordBuilder by copying an existing Builder */
	public static edu.stthomas.gps.multiplevalues.Multiple.Builder newBuilder(
			edu.stthomas.gps.multiplevalues.Multiple.Builder other) {
		return new edu.stthomas.gps.multiplevalues.Multiple.Builder(other);
	}

	/**
	 * Creates a new Multiple RecordBuilder by copying an existing Multiple
	 * instance
	 */
	public static edu.stthomas.gps.multiplevalues.Multiple.Builder newBuilder(
			edu.stthomas.gps.multiplevalues.Multiple other) {
		return new edu.stthomas.gps.multiplevalues.Multiple.Builder(other);
	}

	/**
	 * RecordBuilder for Multiple instances.
	 */
	public static class Builder extends
			org.apache.avro.specific.SpecificRecordBuilderBase<Multiple>
			implements org.apache.avro.data.RecordBuilder<Multiple> {

		private int intField;
		private float floatField;
		private java.lang.CharSequence stringField;

		/** Creates a new Builder */
		private Builder() {
			super(edu.stthomas.gps.multiplevalues.Multiple.SCHEMA$);
		}

		/** Creates a Builder by copying an existing Builder */
		private Builder(edu.stthomas.gps.multiplevalues.Multiple.Builder other) {
			super(other);
			if (isValidValue(fields()[0], other.intField)) {
				this.intField = data().deepCopy(fields()[0].schema(),
						other.intField);
				fieldSetFlags()[0] = true;
			}
			if (isValidValue(fields()[1], other.floatField)) {
				this.floatField = data().deepCopy(fields()[1].schema(),
						other.floatField);
				fieldSetFlags()[1] = true;
			}
			if (isValidValue(fields()[2], other.stringField)) {
				this.stringField = data().deepCopy(fields()[2].schema(),
						other.stringField);
				fieldSetFlags()[2] = true;
			}
		}

		/** Creates a Builder by copying an existing Multiple instance */
		private Builder(edu.stthomas.gps.multiplevalues.Multiple other) {
			super(edu.stthomas.gps.multiplevalues.Multiple.SCHEMA$);
			if (isValidValue(fields()[0], other.intField)) {
				this.intField = data().deepCopy(fields()[0].schema(),
						other.intField);
				fieldSetFlags()[0] = true;
			}
			if (isValidValue(fields()[1], other.floatField)) {
				this.floatField = data().deepCopy(fields()[1].schema(),
						other.floatField);
				fieldSetFlags()[1] = true;
			}
			if (isValidValue(fields()[2], other.stringField)) {
				this.stringField = data().deepCopy(fields()[2].schema(),
						other.stringField);
				fieldSetFlags()[2] = true;
			}
		}

		/** Gets the value of the 'intField' field */
		public java.lang.Integer getIntField() {
			return intField;
		}

		/** Sets the value of the 'intField' field */
		public edu.stthomas.gps.multiplevalues.Multiple.Builder setIntField(
				int value) {
			validate(fields()[0], value);
			this.intField = value;
			fieldSetFlags()[0] = true;
			return this;
		}

		/** Checks whether the 'intField' field has been set */
		public boolean hasIntField() {
			return fieldSetFlags()[0];
		}

		/** Clears the value of the 'intField' field */
		public edu.stthomas.gps.multiplevalues.Multiple.Builder clearIntField() {
			fieldSetFlags()[0] = false;
			return this;
		}

		/** Gets the value of the 'floatField' field */
		public java.lang.Float getFloatField() {
			return floatField;
		}

		/** Sets the value of the 'floatField' field */
		public edu.stthomas.gps.multiplevalues.Multiple.Builder setFloatField(
				float value) {
			validate(fields()[1], value);
			this.floatField = value;
			fieldSetFlags()[1] = true;
			return this;
		}

		/** Checks whether the 'floatField' field has been set */
		public boolean hasFloatField() {
			return fieldSetFlags()[1];
		}

		/** Clears the value of the 'floatField' field */
		public edu.stthomas.gps.multiplevalues.Multiple.Builder clearFloatField() {
			fieldSetFlags()[1] = false;
			return this;
		}

		/** Gets the value of the 'stringField' field */
		public java.lang.CharSequence getStringField() {
			return stringField;
		}

		/** Sets the value of the 'stringField' field */
		public edu.stthomas.gps.multiplevalues.Multiple.Builder setStringField(
				java.lang.CharSequence value) {
			validate(fields()[2], value);
			this.stringField = value;
			fieldSetFlags()[2] = true;
			return this;
		}

		/** Checks whether the 'stringField' field has been set */
		public boolean hasStringField() {
			return fieldSetFlags()[2];
		}

		/** Clears the value of the 'stringField' field */
		public edu.stthomas.gps.multiplevalues.Multiple.Builder clearStringField() {
			stringField = null;
			fieldSetFlags()[2] = false;
			return this;
		}

		@Override
		public Multiple build() {
			try {
				Multiple record = new Multiple();
				record.intField = fieldSetFlags()[0] ? this.intField
						: (java.lang.Integer) defaultValue(fields()[0]);
				record.floatField = fieldSetFlags()[1] ? this.floatField
						: (java.lang.Float) defaultValue(fields()[1]);
				record.stringField = fieldSetFlags()[2] ? this.stringField
						: (java.lang.CharSequence) defaultValue(fields()[2]);
				return record;
			} catch (Exception e) {
				throw new org.apache.avro.AvroRuntimeException(e);
			}
		}
	}
}

